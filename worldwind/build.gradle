buildscript {
    dependencies {
        // Required by the Artifactory gradle plugin for publishing to OJO
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.7.3'
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

android {
    compileSdkVersion 24
    buildToolsVersion '26.0.1'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 9
        versionName '0.7.0'
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        // Setting returnDefaultValues to true prevents un-mocked Android objects from throwing exceptions.
        // Use this only as a workaround; Mockito is preferred.
        // TODO change unitTests.returnDefaultValues to false
        unitTests.returnDefaultValues = true
    }
    productFlavors {
    }
    lintOptions {
        abortOnError false
        disable 'GradleDependency'
    }
}

dependencies {
    compile 'com.android.support:support-annotations:24.+'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.0.43-beta'
    // PowerMockito is required to mock static methods like Logger.log
    testCompile('org.powermock:powermock-api-mockito:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testCompile('org.powermock:powermock-module-junit4:1.6.2') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
}

publishing {
    publications {
        bintray(MavenPublication) {
            artifact bundleRelease
            artifact bundleSourcesJar
            artifact bundleJavadocJar
            groupId 'gov.nasa.worldwind.android'
            artifactId 'worldwind'
            version android.defaultConfig.versionName
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the compile dependencies
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['bintray']
    pkg {
        userOrg = System.getenv('BINTRAY_ORGANIZATION')
        repo = System.getenv('BINTRAY_REPOSITORY')
        name = System.getenv('BINTRAY_PACKAGE')
        version {
            name = android.defaultConfig.versionName
            desc = 'World Wind Android v' + android.defaultConfig.versionName
            vcsTag = System.getenv('TRAVIS_TAG')
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('BINTRAY_API_KEY')
        }
        defaults {
            publications('bintray')
            publishArtifacts = true
        }
    }
}

// Define common output directories
def docOutput = file('./build/outputs/doc/')
def srcOutput = file('./build/outputs/src')

task compileJavadocSources(type: Javadoc) {
    description 'Creates the Javadoc API documentation'
    source android.sourceSets.main.java.srcDirs
    include('**/*.java')
    title 'NASA World Wind Android'
    options.windowTitle 'NASA World Wind Android'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    destinationDir file(new File(docOutput, 'javadoc'))
    failOnError false
}

task bundleJavadocJar(type: Jar) {
    description 'Bundles Javadoc API documentation into a jar'
    classifier 'javadoc'
    from compileJavadocSources
    destinationDir docOutput
}

task bundleJavadocZip(type: Zip) {
    description 'Bundles Javadoc API documentation into a zip file'
    classifier 'javadoc'
    from compileJavadocSources
    destinationDir docOutput
}

task bundleSourcesJar(type: Jar) {
    description 'Bundles the source into a jar'
    classifier 'sources'
    from android.sourceSets.main.java.srcDirs
    destinationDir srcOutput
}

// Attach the javadoc generation to the assemble task for execution during build
assemble.dependsOn(bundleJavadocZip, bundleJavadocJar, bundleSourcesJar)