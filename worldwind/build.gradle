buildscript {
    dependencies {
        // Required by the Artifactory gradle plugin for publishing to OJO
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.10.0'
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.8.4'
}

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        // Setting returnDefaultValues to true prevents un-mocked Android objects from throwing exceptions.
        // Use this only as a workaround; Mockito is preferred.
        // TODO change unitTests.returnDefaultValues to false
        unitTests.returnDefaultValues = true
    }
    productFlavors {
    }
    lintOptions {
        abortOnError false
        disable 'GradleDependency'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.1.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    // PowerMockito is required to mock static methods like Logger.log
    testImplementation('org.powermock:powermock-api-mockito2:2.0.4') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation('org.powermock:powermock-module-junit4:2.0.4') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
}

project.afterEvaluate {
    publishing {
        publications {
            bintray(MavenPublication) {
                artifact bundleReleaseAar
                artifact bundleSourcesJar
                artifact bundleJavadocJar
                groupId 'earth.worldwind'
                artifactId 'worldwind-android'
                version android.defaultConfig.versionName
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the compile dependencies
                    configurations.compile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['bintray']
    pkg {
        userOrg = System.getenv('BINTRAY_ORGANIZATION')
        repo = System.getenv('BINTRAY_REPOSITORY')
        name = System.getenv('BINTRAY_PACKAGE')
        version {
            name = android.defaultConfig.versionName
            desc = 'WorldWind Android v' + android.defaultConfig.versionName
            vcsTag = System.getenv('TRAVIS_TAG')
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('BINTRAY_API_KEY')
        }
        defaults {
            publications('bintray')
            publishArtifacts = true
        }
    }
}

// Define common output directories
def docOutput = file('./build/outputs/doc/')
def srcOutput = file('./build/outputs/src')

task compileJavadocSources(type: Javadoc) {
    description 'Creates the Javadoc API documentation'
    source android.sourceSets.main.java.srcDirs
    include('**/*.java')
    title 'NASA WorldWind Android'
    options.windowTitle 'NASA WorldWind Android'
    options.memberLevel = JavadocMemberLevel.PUBLIC
    destinationDir file(new File(docOutput, 'javadoc'))
    failOnError false
}

task bundleJavadocJar(type: Jar) {
    description 'Bundles Javadoc API documentation into a jar'
    classifier 'javadoc'
    from compileJavadocSources
    destinationDir docOutput
}

task bundleJavadocZip(type: Zip) {
    description 'Bundles Javadoc API documentation into a zip file'
    classifier 'javadoc'
    from compileJavadocSources
    destinationDir docOutput
}

task bundleSourcesJar(type: Jar) {
    description 'Bundles the source into a jar'
    classifier 'sources'
    from android.sourceSets.main.java.srcDirs
    destinationDir srcOutput
}

// Attach the javadoc generation to the assemble task for execution during build
assemble.dependsOn(bundleJavadocZip, bundleJavadocJar, bundleSourcesJar)